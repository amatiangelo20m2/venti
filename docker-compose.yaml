version: "3.8"
services:
  ## Keycloak Config with Mysql database
#  keycloak-postgres:
#    container_name: db_20m2_keycloak_postgres
#    image: postgres:alpine
#    volumes:
#      - ./postgres_keycloak_data:/var/lib/postgresql/data
#    environment:
#      POSTGRES_DB: keycloak-postgres
#      POSTGRES_USER: amati.angelo@20m2.it
#      POSTGRES_PASSWORD: 5Gv94E4uefK8qm92
#    ports:
#      - "5433:5432"
#  keycloak:
#    container_name: keycloak
#    image: quay.io/keycloak/keycloak:18.0.0
#    command: [ "start-dev", "--import-realm" ]
#    environment:
#      DB_VENDOR: POSTGRES
#      DB_ADDR: keycloak-postgres
#      DB_DATABASE: keycloak-postgres
#      DB_USER: amati.angelo@20m2.it
#      DB_PASSWORD: 5Gv94E4uefK8qm92
#      KEYCLOAK_ADMIN: amati.angelo@20m2.it
#      KEYCLOAK_ADMIN_PASSWORD: 5Gv94E4uefK8qm92
#    ports:
#      - "8181:8080"
#    volumes:
#      - ./realms/:/opt/jboss/keycloak/standalone/data/imports/
#    depends_on:
#      - keycloak-postgres
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
  db20m2:
    container_name: db20m2
    image: postgres:alpine
    environment:
      POSTGRES_DB: db20m2
      POSTGRES_USER: zLw473vAW8ELDkV
      POSTGRES_PASSWORD: QyuhTTLOCOWfdFu
      PGDATA: /data/postgres
    volumes:
      - ./db20m2data:/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    restart: always
  db20m2booking:
    container_name: db20m2booking
    image: postgres:alpine
    environment:
      POSTGRES_DB: db20m2booking
      POSTGRES_USER: zLw473vAW8ELDkV
      POSTGRES_PASSWORD: QyuhTTLOCOWfdFu
      PGDATA: /data/postgres
    volumes:
      - ./db20m2databooking:/data/postgres
    expose:
      - "5434"
    ports:
      - "5434:5434"
    command: -p 5434
    restart: always
  pgadmin20m2:
    container_name: pgadmin20m2
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: amati.angelo90@gmail.com
      PGADMIN_DEFAULT_PASSWORD: EM6MbK55bpHUtgVN
    depends_on:
      - db20m2
      - db20m2booking
    ports:
      - "5050:80"
  dbmongo20m2:
    image: mongo:latest
    container_name: customer-mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: booking20m2
      MONGO_INITDB_ROOT_PASSWORD: booking20m2

  mongo-express:
    image: mongo-express:latest
    container_name: 20m2-mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: booking20m2
      ME_CONFIG_MONGODB_ADMINPASSWORD: booking20m2

#  discovery-server:
#    image: amatiangelo1990/20m2:discovery-server
#    container_name: discovery-server
#    ports:
#      - "8761:8761"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin
#  api-gw:
#    image: amatiangelo1990/20m2:api-gw
#    container_name: api-gw
#    ports:
#      - "8080:8080"
#    expose:
#      - "8080"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
#    depends_on:
#      - zipkin
#      - discovery-server
#      - keycloak
#  user-service:
#    image: amatiangelo1990/20m2:user-service
#    container_name: user-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
##      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5431/postgres
#    depends_on:
#      - zipkin
#      - discovery-server
#      - postgres
#  customer-service:
#    image: amatiangelo1990/20m2:customer-service
#    container_name: customer-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
#    depends_on:
#      - zipkin
#      - discovery-server
#  inventory-service:
#    image: amatiangelo1990/20m2:inventory-service
#    container_name: inventory-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
#    depends_on:
#      - zipkin
#      - discovery-server

volumes:
  data: {}
  pg_data:

networks:
  mongodb_network:
